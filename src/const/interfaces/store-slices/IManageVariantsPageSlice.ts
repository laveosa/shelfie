import { VariantModel } from "@/const/models/VariantModel.ts";
import { TypeOfTraitModel } from "@/const/models/TypeOfTraitModel.ts";
import { TraitOptionModel } from "@/const/models/TraitOptionModel.ts";
import { GridRequestModel } from "@/const/models/GridRequestModel.ts";
import { TraitModel } from "@/const/models/TraitModel.ts";
import { ImageModel } from "@/const/models/ImageModel.ts";
import { ProductModel } from "@/const/models/ProductModel.ts";
import { ProductCountersModel } from "@/const/models/CounterModel.ts";
import { VariantHistoryModel } from "@/const/models/VariantHistoryModel.ts";
import { PurchaseModel } from "@/const/models/PurchaseModel.ts";
import { CompanyModel } from "@/const/models/CompanyModel.ts";
import { CountryCodeModel } from "@/const/models/CountryCodeModel.ts";
import { LocationModel } from "@/const/models/LocationModel.ts";

export interface IManageVariantsPageSlice {
  isLoading?: boolean;
  isManageVariantsCardLoading?: boolean;
  isVariantConfigurationCardLoading?: boolean;
  isAddStockCardLoading?: boolean;
  isDisposeStockCardLoading?: boolean;
  isStockHistoryCardLoading?: boolean;
  isAddVariantCardLoading?: boolean;
  isManageTraitsCardLoading?: boolean;
  isChooseVariantTraitsCardLoading?: boolean;
  isProductTraitConfigurationCardLoading?: boolean;
  isVariantPhotosCardLoading?: boolean;
  isVariantHistoryCardLoading?: boolean;
  isSelectPurchaseCardLoading?: boolean;
  isSelectEntityCardLoading?: boolean;
  isCreateCompanyCardLoading?: boolean;
  isCompanyConfigurationCardLoading?: boolean;
  isLocationConfigurationCardLoading?: boolean;
  isSupplierCardLoading?: boolean;
  isProductsLoading?: boolean;
  isTraitOptionsGridLoading?: boolean;
  isVariantOptionsGridLoading?: boolean;
  isVariantPhotoGridLoading?: boolean;
  isProductPhotoGridLoading?: boolean;
  isVariantsHistoryGridLoading?: boolean;
  isPurchaseGridLoading?: boolean;
  isSuppliersGridLoading?: boolean;
  isLocationsGridLoading?: boolean;
  isPhotoUploaderLoading?: boolean;
  products?: ProductModel[];
  selectedVariant: VariantModel;
  isDuplicateVariant: boolean;
  traits?: TraitModel[];
  typesOfTraits?: TypeOfTraitModel[];
  listOfTraitsForProduct?: TraitModel[];
  listOfTraitsWithOptionsForProduct?: TraitModel[];
  activeCards?: any[];
  contextId?: number;
  selectedTraitsIds?: number[];
  selectedTrait?: TraitModel;
  productCounter?: ProductCountersModel;
  traitOptions?: TraitOptionModel[];
  colorOptionsGridRequestModel?: GridRequestModel;
  sizeOptionsGridRequestModel?: GridRequestModel;
  variantTraitsGridRequestModel?: GridRequestModel;
  photosGridRequestModel?: GridRequestModel;
  variantPhotos?: ImageModel[];
  productPhotosForVariant?: ImageModel[];
  variantHistory?: VariantHistoryModel[];
  purchasesList?: PurchaseModel[];
  purchaseGridRequestModel?: GridRequestModel;
  selectedPurchase?: PurchaseModel;
  companiesGridRequestModel?: GridRequestModel;
  selectedCompany?: CompanyModel;
  countryCodes?: CountryCodeModel[];
  managedCompany?: CompanyModel;
  managedLocation?: LocationModel;
}
