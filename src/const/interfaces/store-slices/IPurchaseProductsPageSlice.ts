import { GridRequestModel } from "@/const/models/GridRequestModel.ts";
import { ProductModel } from "@/const/models/ProductModel.ts";
import { BrandModel } from "@/const/models/BrandModel.ts";
import { CategoryModel } from "@/const/models/CategoryModel.ts";
import { ImageModel } from "@/const/models/ImageModel.ts";
import { TraitModel } from "@/const/models/TraitModel.ts";
import { VariantModel } from "@/const/models/VariantModel.ts";
import { IPurchaseSummaryModel } from "@/const/models/PurchaseSummaryModel.ts";
import { VariantHistoryModel } from "@/const/models/VariantHistoryModel.ts";
import { TraitOptionModel } from "@/const/models/TraitOptionModel.ts";
import { PurchaseModel } from "@/const/models/PurchaseModel.ts";
import { CompanyModel } from "@/const/models/CompanyModel.ts";
import { CountryCodeModel } from "@/const/models/CountryCodeModel.ts";
import { LocationModel } from "@/const/models/LocationModel.ts";

export interface IPurchaseProductsPageSlice {
  isLoading?: boolean;
  isProductMenuCardLoading?: boolean;
  isPurchaseProductsCardLoading?: boolean;
  isPurchasesProductsGridLoading?: boolean;
  isProductsGridLoading?: boolean;
  isProductConfigurationCardLoading?: boolean;
  isCreateCategoryCardLoading?: boolean;
  isCreateBrandCardLoading?: boolean;
  isManageProductCardLoading?: boolean;
  isProductPhotosCardLoading?: boolean;
  isConnectImageCardLoading?: boolean;
  isChooseVariantTraitsCardLoading?: boolean;
  isProductTraitConfigurationCardLoading?: boolean;
  isAddVariantCardLoading?: boolean;
  isVariantConfigurationCardLoading?: boolean;
  isAddStockCardLoading?: boolean;
  isDisposeStockCardLoading?: boolean;
  isVariantHistoryCardLoading?: boolean;
  isVariantPhotosCardLoading?: boolean;
  isManageTraitsCardLoading?: boolean;
  isSelectPurchaseCardLoading?: boolean;
  isSelectEntityCardLoading?: boolean;
  isSupplierCardLoading?: boolean;
  isCreateCompanyCardLoading?: boolean;
  isCompanyConfigurationCardLoading?: boolean;
  isLocationConfigurationCardLoading?: boolean;
  isImageUploaderLoading?: boolean;
  isProductPhotosLoading?: boolean;
  isVariantsGridLoading?: boolean;
  isTraitOptionsGridLoading?: boolean;
  isVariantGridLoading?: boolean;
  isVariantOptionsGridLoading?: boolean;
  isVariantPhotoGridLoading?: boolean;
  isProductPhotoGridLoading?: boolean;
  isVariantHistoryGridLoading?: boolean;
  isVariantsForPurchaseGridLoading?: boolean;
  isPurchaseGridLoading?: boolean;
  isSuppliersGridLoading?: boolean;
  isLocationsGridLoading?: boolean;
  activeCards?: any[];
  activeTab?: string;
  variants?: VariantModel[];
  selectedProduct?: ProductModel;
  purchasesProductsGridRequestModel?: GridRequestModel;
  variantsForPurchaseGridRequestModel?: GridRequestModel;
  colorOptionsGridRequestModel?: GridRequestModel;
  purchaseProductVariantsGridRequestModel?: GridRequestModel;
  purchaseProducts?: ProductModel[];
  brands?: BrandModel[];
  categories?: CategoryModel[];
  countryCodes?: CountryCodeModel[];
  selectedPhoto?: ImageModel;
  selectedTraitsIds?: number[];
  selectedTrait?: TraitModel;
  isDuplicateVariant?: boolean;
  purchaseProductVariants?: VariantModel[];
  purchaseSummary?: IPurchaseSummaryModel;
  variantPhotos?: ImageModel[];
  productPhotosForVariant?: ImageModel[];
  variantHistory?: VariantHistoryModel[];
  traitsForFilters?: { color?: TraitOptionModel[]; size?: TraitOptionModel[] };
  traitsForFilter?: TraitModel[];
  colorsForFilter?: TraitOptionModel[];
  sizesForFilter?: TraitOptionModel[];
  purchasesList?: PurchaseModel[];
  purchaseGridRequestModel?: GridRequestModel;
  selectedPurchase?: PurchaseModel;
  companiesGridRequestModel?: GridRequestModel;
  selectedCompany?: CompanyModel;
  managedCompany?: CompanyModel;
  managedLocation?: LocationModel;
}
